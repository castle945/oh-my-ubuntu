#!/bin/bash 
#
# shell 环境配置

NC='\033[0m'        # 颜色代码，默认白色
RED='\033[0;31m'
GREEN='\033[0;32m'
function info {
    echo -e "${GREEN}$1${NC}"
}
function error {
    echo -e "${RED}Error: $1${NC}" >&2 # 将错误信息输出到标准错误
    exit 1
}
function echorun {
    echo "$@" && "$@"
}
function ask {
  while true; do
    read -p "$1 ([y]/n) " -r
    REPLY=${REPLY:-"y"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 1
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 0
    fi
  done
}


function apt_install {
    [[ -x "$(command -v sudo)" ]] || { apt update ; apt install -y sudo; } || error "sudo should be installed first! exit." # 左边执行失败则执行右边，否则停止
    [ ! -f /etc/localtime ] && sudo ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo Asia/Shanghai > /etc/timezone
    sudo apt install -y git tmux unzip wget vim zsh nfs-common 
    sudo apt install -y language-pack-zh-hans
    sudo apt install -y python3-distutils libgl1-mesa-glx libsm6 libglib2.0-dev
}
function copy_config {
    echorun cd $(dirname $(readlink -f ${BASH_SOURCE[0]}))/home
    echorun cp -rp $(ls -A) $HOME
    cd
    sed -i -E '/^#/d; /^```/d; s/[[:space:]]*#.*$//; /^$/d' .zsh_history.md # 删除 # 开题的标题，```开头的代码块符号，以及行尾注释
    cat .zsh_history.md >> .zsh_history && rm -f .zsh_history.md
    echorun chsh -s /bin/zsh    # 安装 ohmyzsh, 见其文档手动安装步骤
    echorun .fzf/install --all  # 安装 fzf, --all 避免交互
}
function update {
    # 创建新老配置文件的对比工作区
    diff_dir=$(pwd)/oh-my-ubuntu
    mkdir -p $diff_dir/{_old,new}
    cd $(dirname $(readlink -f ${BASH_SOURCE[0]}))/home
    find . -path './.oh-my-zsh' -prune -o -path './.fzf' -prune -o -type f -print | while IFS= read -r file; do
        dir=$(dirname $file)
        mkdir -p $diff_dir/new/$dir
        echorun cp -rp $file $diff_dir/new/$dir
        if [ -e $HOME/$file ]; then
            mkdir -p $diff_dir/_old/$dir
            echorun cp -rp $HOME/$file $diff_dir/_old/$dir
        fi
    done
    info "A compare workspace has been created in $diff_dir, here are the differences"
    echorun diff --color -r $diff_dir/_old $diff_dir/new
    # 执行配置文件拷贝
    local skip_zshrc=
    if [ -z "$skip_zshrc" ]; then
        ask "skip update .zshrc?"
        skip_zshrc=$?
    fi
    if [[ $skip_zshrc -eq 1 ]]; then
        echorun rm -f $diff_dir/new/.zshrc
    fi
    local choice=$1 # choice= 不赋值则为空
    if [ -z "$choice" ]; then # 如果 choice 为空
        ask "cp -rp $diff_dir/new/{.*,*} $HOME?"
        choice=$?
    fi
    if [[ $choice -eq 1 ]]; then
        shopt -s nullglob dotglob   # set glob options, to include hidden files
        echorun cp -rp $diff_dir/new/* $HOME
        shopt -u nullglob dotglob   # unset glob options
    else
        error "abort update files!"
    fi
}

# 命令行参数解析
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    printf "Usage:\n\t$0\t\t# for install \n\t$0 update [1]\t# for update, input update 1 for direct copy\n"
    exit 1
fi
# 如果是更新配置文件
if [ $# -gt 0 ]; then
    cmd=$1
    shift
    if [ "$cmd" == "update" ]; then
        update $*
        exit 0
    else
        error "Unknown command: '$cmd'. Expected 'update'."
    fi
fi

# 判断操作系统与 CPU 架构执行对应函数
os_cpu_type=$(uname -sm)
if !([[ "$os_cpu_type" == "Linux x86_64" ]] || [[ "$os_cpu_type" == "Darwin arm64" ]] || [[ "$os_cpu_type" == "Linux aarch64" ]]); then
    error "Not supported on $os_cpu_type"
fi

info "Find Operating System and CPU Architecture: $os_cpu_type"
if [[ "$(uname -s)" == "Linux" ]]; then
    apt_install
fi
copy_config